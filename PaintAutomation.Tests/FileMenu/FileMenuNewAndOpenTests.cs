using FluentAssertions;
using PaintAutomation.Core.Helpers;
using PaintAutomation.Tests.Base;
using PaintAutomation.UI.Enums;

namespace PaintAutomation.Tests.FileMenu;

[TestFixture]
public class FileMenuNewAndOpenTests : TestBase
{
	[Test]
	public void VerifyNewFileCreatesBlankCanvas()
	{
		var filePath = Path.Combine(Path.GetTempPath(), $"paint_test_{Guid.NewGuid()}.png");
		var expectedFilePath = Path.Combine(TestContext.CurrentContext.TestDirectory, "Resources", "empty.png");

		MainWindow.Menu.CreateNewFile();
		MainWindow.Menu.Save(filePath);

		ImageComparer.CompareImagesWithTolerance(expectedFilePath, filePath)
			.Should().BeTrue("a new file should create a blank canvas");
	}

	[Test]
	public void VerifyOpenFileLoadsExpectedDrawing()
	{
		var expectedFilePath = Path.Combine(TestContext.CurrentContext.TestDirectory, "Resources", "sample.png");
		var testFilePath = Path.Combine(Path.GetTempPath(), $"paint_open_test_{Guid.NewGuid()}.png");
		var actualFilePath = Path.Combine(Path.GetTempPath(), $"paint_open_result_{Guid.NewGuid()}.png");
		File.Copy(expectedFilePath, testFilePath, overwrite: true);

		MainWindow.Menu.Open(testFilePath);
		MainWindow.Menu.SaveAs(SaveAsSubItem.Png, actualFilePath);

		ImageComparer.CompareImagesWithTolerance(expectedFilePath, actualFilePath)
			.Should().BeTrue("opening an existing file should load its content correctly");
	}
}
